# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
lint.select = ["ALL"]
lint.ignore = ["E402", "TRY003", "EM101", "G004", "ERA001", "COM812", "ISC001", "RUF012", "ANN204", "D", "ANN101", "ANN102", "FBT002", "FBT001", "BLE001", "TID252", "FBT003", "ANN003", "ANN002", "S108", "W605", "TRY300"]
# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
lint.unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
    'alembic',
]

line-length = 120

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py312"

[lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[lint.pylint]
max-args = 10
[lint.per-file-ignores]
"tests/*" = ["ALL"]
"promt_templates.py" = ["W291", "E501"]
"*tool.py" = ["ARG002"]
"*retrieve.py" = ["ARG002"]
"*filters.py" = ["E501"]
"*constants.py" = ["E501"]
"*icon.py" = ["E501"]
"mock_*.py" = ["RUF001", "E501"]
[lint.pep8-naming]
classmethod-decorators = [
    # Allow Pydantic's `@validator` decorator to trigger class method treatment.
    "pydantic.validator",
    "pydantic.v1.validator",
    "pydantic.root_validator",
    "langchain_core.pydantic_v1.root_validator",
    "langchain.pydantic_v1.validator",
    # Allow SQLAlchemy's dynamic decorators, like `@field.expression`, to trigger class method treatment.
    "declared_attr",
    "expression",
    "comparator",
    "classmethod"
]